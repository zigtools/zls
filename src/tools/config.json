{
    "options": [
        {
            "name": "enable_snippets",
            "description": "Enables snippet completions when the client also supports them",
            "type": "bool",
            "default": true
        },
        {
            "name": "enable_argument_placeholders",
            "description": "Whether to enable function argument placeholder completions",
            "type": "bool",
            "default": true
        },
        {
            "name": "completion_label_details",
            "description": "Whether to show the function signature in completion results. May improve readability in some editors when disabled",
            "type": "bool",
            "default": true
        },
        {
            "name": "enable_build_on_save",
            "description": "Whether to enable build-on-save diagnostics. Will be automatically enabled if the `build.zig` has declared a 'check' step.\n\nFor more infromation, checkout the [Build-On-Save](https://zigtools.org/zls/guides/build-on-save/) Guide.",
            "type": "?bool",
            "default": null
        },
        {
            "name": "build_on_save_args",
            "description": "Specify which arguments should be passed to Zig when running build-on-save.\n\nIf the `build.zig` has declared a 'check' step, it will be preferred over the default 'install' step.",
            "type": "[]const []const u8",
            "default": []
        },
        {
            "name": "semantic_tokens",
            "description": "Set level of semantic tokens. `partial` only includes information that requires semantic analysis.",
            "type": "enum",
            "enum": [
                "none",
                "partial",
                "full"
            ],
            "default": "full"
        },
        {
            "name": "inlay_hints_show_variable_type_hints",
            "description": "Enable inlay hints for variable types",
            "type": "bool",
            "default": true
        },
        {
            "name": "inlay_hints_show_struct_literal_field_type",
            "description": "Enable inlay hints for fields in struct and union literals",
            "type": "bool",
            "default": true
        },
        {
            "name": "inlay_hints_show_parameter_name",
            "description": "Enable inlay hints for parameter names",
            "type": "bool",
            "default": true
        },
        {
            "name": "inlay_hints_show_builtin",
            "description": "Enable inlay hints for builtin functions",
            "type": "bool",
            "default": true
        },
        {
            "name": "inlay_hints_exclude_single_argument",
            "description": "Don't show inlay hints for single argument calls",
            "type": "bool",
            "default": true
        },
        {
            "name": "inlay_hints_hide_redundant_param_names",
            "description": "Hides inlay hints when parameter name matches the identifier (e.g. `foo: foo`)",
            "type": "bool",
            "default": false
        },
        {
            "name": "inlay_hints_hide_redundant_param_names_last_token",
            "description": "Hides inlay hints when parameter name matches the last token of a parameter node (e.g. `foo: bar.foo`, `foo: &foo`)",
            "type": "bool",
            "default": false
        },
        {
            "name": "force_autofix",
            "description": "Work around editors that do not support 'source.fixall' code actions on save. This option may delivered a substandard user experience. Please refer to the installation guide to see which editors natively support code actions on save.",
            "type": "bool",
            "default": false
        },
        {
            "name": "warn_style",
            "description": "Enables warnings for style guideline mismatches",
            "type": "bool",
            "default": false
        },
        {
            "name": "highlight_global_var_declarations",
            "description": "Whether to highlight global var declarations",
            "type": "bool",
            "default": false
        },
        {
            "name": "skip_std_references",
            "description": "When true, skips searching for references in the standard library. Improves lookup speed for functions in user's code. Renaming and go-to-definition will continue to work as is",
            "type": "bool",
            "default": false
        },
        {
            "name": "prefer_ast_check_as_child_process",
            "description": "Favor using `zig ast-check` instead of the builtin one",
            "type": "bool",
            "default": true
        },
        {
            "name": "builtin_path",
            "description": "Override the path to 'builtin' module. Automatically resolved if unset.",
            "type": "?[]const u8",
            "default": null
        },
        {
            "name": "zig_lib_path",
            "description": "Override the Zig library path. Will be automatically resolved using the 'zig_exe_path'.",
            "type": "?[]const u8",
            "default": null
        },
        {
            "name": "zig_exe_path",
            "description": "Specify the path to the Zig executable (not the directory). If unset, zig is looked up in `PATH`. e.g. `/path/to/zig-templeos-armless-1.0.0/zig`.",
            "type": "?[]const u8",
            "default": null
        },
        {
            "name": "build_runner_path",
            "description": "Specify a custom build runner to resolve build system information.",
            "type": "?[]const u8",
            "default": null
        },
        {
            "name": "global_cache_path",
            "description": "Path to a directory that will be used as zig's cache. Will default to `${KnownFolders.Cache}/zls`.",
            "type": "?[]const u8",
            "default": null
        }
    ]
}
